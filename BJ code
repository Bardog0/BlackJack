'''
In this step I creat the deck and imports the random module that will help
me shuffle the deck.
'''

import random

suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')
ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')
values = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10,
         'Queen':10, 'King':10, 'Ace':11}

playing = True


class Card:

    def __init__(self, suit, rank):
        self.suit = suit
        self.rank = rank

    def __str__(self):
        return self.rank + " of " + self.suit


class Deck:

    def __init__(self):
        self.deck = []  # start with an empty list
        for suit in suits:
            for rank in ranks:
                card = Card(suit, rank)
                self.deck.append(card)

    def __str__(self):
        deck_comp = ''  # start with an empty string
        for card in self.deck:
            deck_comp += '\n ' + card.__str__()  # add each Card object's print string
        return 'The deck has:' + deck_comp

    def shuffle(self):
        random.shuffle(self.deck)

    def deal(self):
        single_card = self.deck.pop()
        return single_card


class Hand:
    def __init__(self):
        self.cards = []  # start with an empty list as we did in the Deck class
        self.value = 0  # start with zero value
        self.aces = 0  # add an attribute to keep track of aces

    def add_card(self, card):
        self.cards.append(card)
        self.value += values[card.rank]
        if card.rank == "Ace":
            self.aces += 1  # add to self.aces

    def adjust_for_ace(self):
        while self.value > 21 and self.aces:
            self.value -= 10
            self.aces -= 1


class Chips:

    def __init__(self):
        self.total = 100  # This can be set to a default value or supplied by a user input
        self.bet = 0

    def win_bet(self, amount):
        self.total += amount
        print(f"You have won {amount} chips and now you have {self.total} in total!")
        return self.total, amount

    def lose_bet(self, amount):
        self.total -= amount
        print(f"You lost {amount} chips and now you have {self.total} chips left")
        return self.total, amount



serial_number = [1,2,3,4,5,6,7,8,9,10]
bet_number = [5,10,15,20,25,30,35,40,45,50]
bet_amount = {'1':5,'2':10,'3':15,'4':20,'5':25,'6':30,'7':35,'8':40,'9':45,'10':50}
zip_dict = zip(serial_number, bet_amount)
# bet_options = dict(zip_dict)
def take_bet():
    while True:
        for a,b in zip(serial_number, bet_number):
            print(a,b)
        try:
            bet_selection = input("Choose the amount you want to bet on: ")
            print(f"You are betting on {bet_amount[bet_selection]} chips!")
            break
        except KeyError:
            print("You have to type the number of your selection")
            continue

        return bet_amount[bet_selection]


hit_play = True


def hit(deck, hand):
    hand.add_card(deck.deal())
    hand.adjust_for_ace()




def hit_or_stay(deck, hand):
    '''
    This func will be called when:
    1. player requests a hit.
    2. dealer's hand is less then 17.

    if player hand is over 21 it will check for Aces.
    '''

    plays = {'1': 'hit', '2': 'stand'}
    while True:
        hit_ask = input("Type 1 to hit or 2 to stand: ")

        while hit_ask in plays:
            print(f"You have decided to {plays[hit_ask]}")
            break
        else:
            print("You have to choose 1 or 2: ")
            hit_ask = input("Type 1 to hit or 2 to stand: ")
            continue

        if hit_ask == '1':
            hit(deck, hand)

        elif hit_ask == '2':
            hit_play = False
        break
    if player.value > 21:
        adjust_for_ace()


def show_some_player(player):
    print("Your cards are:\n ")
    for card in player.cards:
        print(card)


def show_some_dealer(dealer):
    print("Dealer's cards are:\n ")
    print(dealer.cards[1])

    print('\n')


def show_all_player(player):
    print("Your cards are:\n ")
    for card in player.cards:
        print(card)


def show_all_dealer(dealer):
    print("Dealer's cards are:\n ")
    for card in player.cards:
        print(card)


def player_busts(amount):
    print("You busts! Dealer wins!")
    print(f"Your hand is {player.value} and Dealers hand is {dealer.value}")
    busts = bank.lose_bet(amount)


def player_wins(amount):
    print("You won!!! Dealer lost!")
    print(f"Your hand is {player.value} and Dealers hand is {dealer.value}")
    win = bank.win_bet(amount)


def dealer_busts(amount):
    player_wins(amount)


def dealer_wins():
    player_busts(amount)


def push():
    pass




game_on = True
while True:
    # Print an opening statement
    print("Welcome to PALM TREE Casino!")
    print("Here, we will make your dreams come true")
    player = input("What is your name? \n")
    print(f"There you go {player}, 100$ on the house added to your account")
    print("Follow me to the BlackJack table!")

    # Create & shuffle the deck, deal two cards to each player

    deck = Deck()
    deck.shuffle()
    player = Hand()
    player.add_card(deck.deal())
    player.add_card(deck.deal())
    dealer = Hand()
    dealer.add_card(deck.deal())
    dealer.add_card(deck.deal())

    # Set up the Player's chips
    bank = Chips()

    # Prompt the Player for their bet
    print(f"{show_all_player(player)}")
    print(f"{show_some_dealer(dealer)}")
    serial_number = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    bet_number = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]
    bet_amount = {'1': 5, '2': 10, '3': 15, '4': 20, '5': 25, '6': 30, '7': 35, '8': 40, '9': 45, '10': 50}
    zip_dict = zip(serial_number, bet_amount)
    bet_options = dict(zip_dict)


    def take_bet():
        while True:
            for a, b in zip(serial_number, bet_number):
                print(a, b)
            try:
                bet_selection = input("Choose the amount you want to bet on: ")
                print(f"You are betting on {bet_amount[bet_selection]} chips!")
                break
            except KeyError:
                print("You have to type the number of your selection")
                continue

            return bet_amount[bet_selection]




        # global playing
    while playing:  # recall this variable from our hit_or_stand function

        # hit_or_stay(deck, player)

        # Prompt for Player to Hit or Stand

        # Show cards (but keep one dealer card hidden)
        print(f"Your cards are {show_all_player(player)} with the value of {player.value}")
        print(f"Dealer's cards are {show_some_dealer(dealer)}")

        # If player's hand exceeds 21, run player_busts() and break out of loop
        if player.value > 21:
            player_busts(amount)
        else:
            hit_or_stay(deck, player)

            break

        # If Player hasn't busted, play Dealer's hand until Dealer reaches 17
        while player.value <= 21:
            dealer.add_card(card)
            if dealer.value >= 17:
                break

        # Show all cards
        show_all_player(player)
        show_all_dealer(dealer)

        # Run different winning scenarios
        if player_wins() == True:
            player_wins(amount)
        else:
            player_busts(amount)

    # Inform Player of their chips total

    # Ask to play again
    play_again = int(input("Type 1 for another round, type 2 to go home: "))
    if play_again == '1':
        game_on = True

    #         break
    else:
        game_on = False
